
ICE4-1 : Create tables for all five use cases given in the ppt.

Use Case 1: Table Locations with information containing country, state and city

Solution: Here I am creating two column families. One column family contains the country and the other column family contains state and the city. This could help in partitioning by country. 

Commands: 

create 'location', 'loc_info1', 'loc_info2'

put 'location', '1', 'loc_info1:country', 'USA'
put 'location', '1', 'loc_info2:state', 'Kansas'
put 'location', '1', 'loc_info2:city', 'Overland Park'

put 'location', '2', 'loc_info1:country', 'USA'
put 'location', '2', 'loc_info2:state', 'Georgia'
put 'location', '2', 'loc_info2:city', 'Atlanta'

put 'location', '3', 'loc_info1:country', 'India'
put 'location', '3', 'loc_info2:state', 'Maharashtra'
put 'location', '3', 'loc_info2:city', 'Mumbai'

scan 'location'


Use Case 2: Table containing courses enrolled by students

Solution: I am creating a single table containing student-course relationship with four column families viz. student, course1, course2, course3

Commands:

create 'course_student', 'student', 'course1', 'course2', 'course3'

put 'course_student', '1', 'student:name', 'Avni'
put 'course_student', '1', 'student:sex', 'Female'
put 'course_student', '1', 'student:age', '25'

put 'course_student', '1', 'course1:title', 'Big Data'
put 'course_student', '1', 'course1:instructor', 'Mayanka'
put 'course_student', '1', 'course1:grade', 'A'
put 'course_student', '1', 'course2:title', 'ISL'
put 'course_student', '1', 'course2:instructor', 'Dr. Medhi'
put 'course_student', '1', 'course2:grade', 'A'
put 'course_student', '1', 'course3:title', 'Supervised Learning'
put 'course_student', '1', 'course3:instructor', 'Dr. Rattani'
put 'course_student', '1', 'course3:grade', 'A'

put 'course_student', '2', 'student:name', 'Hardik'
put 'course_student', '2', 'student:sex', 'Male'
put 'course_student', '2', 'student:age', '25'
                       
put 'course_student', '2', 'course1:title', 'DAA'
put 'course_student', '2', 'course1:instructor', 'Appie'
put 'course_student', '2', 'course1:grade', 'A-'
put 'course_student', '2', 'course2:title', 'Python'
put 'course_student', '2', 'course2:instructor', 'Dr. Lee'
put 'course_student', '2', 'course2:grade', 'A'
put 'course_student', '2', 'course3:title', 'Neural Networks'
put 'course_student', '2', 'course3:instructor', 'Dr. Rattani'
put 'course_student', '2', 'course3:grade', 'A'

scan 'course_student'


Use Case 3: Table containing user actions

Solution: I am creating a single table with two column families viz. user_details, event_details

Commands:

create 'user_actions', 'user_details', 'event_details'

put 'user_actions', '1', 'user_details:user_id', '1023'
put 'user_actions', '1', 'user_details:user_name', 'Avni'
put 'user_actions', '1', 'event_details:event_id', '9234'
put 'user_actions', '1', 'event_details:event_name', 'Login'
put 'user_actions', '1', 'event_details:event_time', '2017-05-08 12:35:29'

put 'user_actions', '2', 'user_details:user_id', '1023'
put 'user_actions', '2', 'user_details:user_name', 'Avni'
put 'user_actions', '2', 'event_details:event_id', '9451'
put 'user_actions', '2', 'event_details:event_name', 'Logout'
put 'user_actions', '2', 'event_details:event_time', '2017-05-08 12:50:51'

put 'user_actions', '3', 'user_details:user_id', '1027'
put 'user_actions', '3', 'user_details:user_name', 'Hardik'
put 'user_actions', '3', 'event_details:event_id', '10021'
put 'user_actions', '3', 'event_details:event_name', 'Login'
put 'user_actions', '3', 'event_details:event_time', '2017-06-08 08:42:10'

scan 'user_actions'


Use Case 4: Table containing friends of user. 

Solution: I am creating a single table with two column families viz. user_info and friend_info

Commands:

create 'user_friend', 'user_info', 'friend_info'

put 'user_friend', '1', 'user_info:user_id', '103'
put 'user_friend', '1', 'user_info:user_name', 'Avni'
put 'user_friend', '1', 'friend_info:friend_id', '210'
put 'user_friend', '1', 'friend_info:friend_name', 'Rivya'
put 'user_friend', '1', 'friend_info:friend_since', '2006'

put 'user_friend', '2', 'user_info:user_id', '103'
put 'user_friend', '2', 'user_info:user_name', 'Avni'
put 'user_friend', '2', 'friend_info:friend_id', '162'
put 'user_friend', '2', 'friend_info:friend_name', 'Hardik'
put 'user_friend', '2', 'friend_info:friend_since', '2015'

put 'user_friend', '3', 'user_info:user_id', '162'
put 'user_friend', '3', 'user_info:user_name', 'Hardik'
put 'user_friend', '3', 'friend_info:friend_id', '113'
put 'user_friend', '3', 'friend_info:friend_name', 'Neha'
put 'user_friend', '3', 'friend_info:friend_since', '2005'

scan 'user_friend'


Use Case 5: Table for user logs containing details for http and user access

Solution: I am creating a table user_access containing two column families viz. http_details and user_details

Commands: 

create 'user_logs', 'http_details', 'user_details'

put 'user_logs', '1', 'http_details:ip', '127.103.0.1'
put 'user_logs', '1', 'http_details:domain', 'analyticsvidya'
put 'user_logs', '1', 'http_details:url', 'www.analyticsvidya.com/python'
put 'user_logs', '1', 'user_details:browser_cookie', 'X$9Afs210'
put 'user_logs', '1', 'user_details:login_id', '6522345'

put 'user_logs', '2', 'http_details:ip', '117.231.13.1'
put 'user_logs', '2', 'http_details:domain', 'hackerrank'
put 'user_logs', '2', 'http_details:url', 'www.hackerrank.com/best-books'
put 'user_logs', '2', 'user_details:browser_cookie', 'Xv$HG770'
put 'user_logs', '2', 'user_details:login_id', '8732522'

scan 'user_logs'



ICE4-2 : For any two of the above use cases, construct 2 queries on each type of HBase command.

UseCase 1: Locations:

General HBase shell commands: 

--shows cluster status. Can be ‘summary’, ‘simple’, or ‘detailed’. Default is ‘summary'
status

--Output this HBase version
version


Tables Management commands:

--Describe the named table
describe 'location'

--verifies Is named table exists
exists 'location'


Data Manipulation commands: 

--Get row or cell contents
get 'location', '1'

--Scan entire table
scan 'location'

HBase surgery tools: 

--Trigger the cluster balancer. Returns true if balancer ran and was able to tell the region servers to unassign all the regions to balance
balancer

--Enable/Disable balancer. Returns previous balancer state
balance_switch true

UseCase 2: student_course:

General HBase shell commands: 

--Output this HBase version
whoami

--shows cluster status. Can be ‘summary’, ‘simple’, or ‘detailed’. Default is ‘summary'
status 'simple'

Tables Management commands:

--List all tables in hbase. Optional regular expression parameter could be used to filter the output
list 'course.*' 

--verifies Is named table enabled
is_enabled 'course_student'


Data Manipulation commands: 

--Count the number of rows in a table
count 'location'

--insert value
put 'course_student', '5', 'student:name', 'John'


HBase surgery tools: 

--Disable balancer 
balance_switch false

--Check balancer
balancer
